package walktypescript

import sitter "github.com/smacker/go-tree-sitter"

type visitorFunction[T any] func(node *sitter.Node, state T, indexInParent int) T
type VisitorFuncMap[T any] map[string]visitorFunction[T]

func NewVisitorFuncsMap[T any]() VisitorFuncMap[T] {
	var visitorFuncs VisitorFuncMap[T] = VisitorFuncMap[T]{
		"ERROR":                                 dummyVisitor[T],
		"_primary_type":                         dummyVisitor[T],
		"abstract_class_declaration":            dummyVisitor[T],
		"abstract_method_signature":             dummyVisitor[T],
		"accessibility_modifier":                dummyVisitor[T],
		"adding_type_annotation":                dummyVisitor[T],
		"ambient_declaration":                   dummyVisitor[T],
		"arguments":                             dummyVisitor[T],
		"array":                                 dummyVisitor[T],
		"array_pattern":                         dummyVisitor[T],
		"array_type":                            dummyVisitor[T],
		"arrow_function":                        dummyVisitor[T],
		"as_expression":                         dummyVisitor[T],
		"asserts":                               dummyVisitor[T],
		"asserts_annotation":                    dummyVisitor[T],
		"assignment_expression":                 dummyVisitor[T],
		"assignment_pattern":                    dummyVisitor[T],
		"augmented_assignment_expression":       dummyVisitor[T],
		"await_expression":                      dummyVisitor[T],
		"binary_expression":                     dummyVisitor[T],
		"break_statement":                       dummyVisitor[T],
		"call_expression":                       dummyVisitor[T],
		"call_signature":                        dummyVisitor[T],
		"catch_clause":                          dummyVisitor[T],
		"class":                                 dummyVisitor[T],
		"class_body":                            dummyVisitor[T],
		"class_declaration":                     dummyVisitor[T],
		"class_heritage":                        dummyVisitor[T],
		"class_static_block":                    dummyVisitor[T],
		"comment":                               dummyVisitor[T],
		"computed_property_name":                dummyVisitor[T],
		"conditional_type":                      dummyVisitor[T],
		"constraint":                            dummyVisitor[T],
		"construct_signature":                   dummyVisitor[T],
		"constructor_type":                      dummyVisitor[T],
		"continue_statement":                    dummyVisitor[T],
		"debugger_statement":                    dummyVisitor[T],
		"declaration":                           dummyVisitor[T],
		"decorator":                             dummyVisitor[T],
		"default_type":                          dummyVisitor[T],
		"do_statement":                          dummyVisitor[T],
		"else_clause":                           dummyVisitor[T],
		"empty_statement":                       dummyVisitor[T],
		"enum_assignment":                       dummyVisitor[T],
		"enum_body":                             dummyVisitor[T],
		"enum_declaration":                      dummyVisitor[T],
		"escape_sequence":                       dummyVisitor[T],
		"existential_type":                      dummyVisitor[T],
		"export_clause":                         dummyVisitor[T],
		"export_specifier":                      dummyVisitor[T],
		"export_statement":                      dummyVisitor[T],
		"expression":                            dummyVisitor[T],
		"expression_statement":                  dummyVisitor[T],
		"extends_clause":                        dummyVisitor[T],
		"extends_type_clause":                   dummyVisitor[T],
		"false":                                 dummyVisitor[T],
		"finally_clause":                        dummyVisitor[T],
		"flow_maybe_type":                       dummyVisitor[T],
		"for_in_statement":                      dummyVisitor[T],
		"for_statement":                         dummyVisitor[T],
		"formal_parameters":                     dummyVisitor[T],
		"function_declaration":                  dummyVisitor[T],
		"function_expression":                   dummyVisitor[T],
		"function_signature":                    dummyVisitor[T],
		"function_type":                         dummyVisitor[T],
		"generator_function":                    dummyVisitor[T],
		"generator_function_declaration":        dummyVisitor[T],
		"generic_type":                          dummyVisitor[T],
		"glimmer_closing_tag":                   dummyVisitor[T],
		"glimmer_opening_tag":                   dummyVisitor[T],
		"glimmer_template":                      dummyVisitor[T],
		"hash_bang_line":                        dummyVisitor[T],
		"html_character_reference":              dummyVisitor[T],
		"html_comment":                          dummyVisitor[T],
		"identifier":                            dummyVisitor[T],
		"if_statement":                          dummyVisitor[T],
		"implements_clause":                     dummyVisitor[T],
		"import":                                dummyVisitor[T],
		"import_alias":                          dummyVisitor[T],
		"import_attribute":                      dummyVisitor[T],
		"import_clause":                         dummyVisitor[T],
		"import_require_clause":                 dummyVisitor[T],
		"import_specifier":                      dummyVisitor[T],
		"import_statement":                      dummyVisitor[T],
		"index_signature":                       dummyVisitor[T],
		"index_type_query":                      dummyVisitor[T],
		"infer_type":                            dummyVisitor[T],
		"instantiation_expression":              dummyVisitor[T],
		"interface_body":                        dummyVisitor[T],
		"interface_declaration":                 dummyVisitor[T],
		"internal_module":                       dummyVisitor[T],
		"intersection_type":                     dummyVisitor[T],
		"jsx_attribute":                         dummyVisitor[T],
		"jsx_closing_element":                   dummyVisitor[T],
		"jsx_element":                           dummyVisitor[T],
		"jsx_expression":                        dummyVisitor[T],
		"jsx_namespace_name":                    dummyVisitor[T],
		"jsx_opening_element":                   dummyVisitor[T],
		"jsx_self_closing_element":              dummyVisitor[T],
		"jsx_text":                              dummyVisitor[T],
		"labeled_statement":                     dummyVisitor[T],
		"lexical_declaration":                   dummyVisitor[T],
		"literal_type":                          dummyVisitor[T],
		"lookup_type":                           dummyVisitor[T],
		"mapped_type_clause":                    dummyVisitor[T],
		"member_expression":                     dummyVisitor[T],
		"meta_property":                         dummyVisitor[T],
		"method_definition":                     dummyVisitor[T],
		"method_signature":                      dummyVisitor[T],
		"module":                                dummyVisitor[T],
		"named_imports":                         dummyVisitor[T],
		"namespace_export":                      dummyVisitor[T],
		"namespace_import":                      dummyVisitor[T],
		"nested_identifier":                     dummyVisitor[T],
		"nested_type_identifier":                dummyVisitor[T],
		"new_expression":                        dummyVisitor[T],
		"non_null_expression":                   dummyVisitor[T],
		"null":                                  dummyVisitor[T],
		"number":                                dummyVisitor[T],
		"object":                                dummyVisitor[T],
		"object_assignment_pattern":             dummyVisitor[T],
		"object_pattern":                        dummyVisitor[T],
		"object_type":                           dummyVisitor[T],
		"omitting_type_annotation":              dummyVisitor[T],
		"opting_type_annotation":                dummyVisitor[T],
		"optional_chain":                        dummyVisitor[T],
		"optional_parameter":                    dummyVisitor[T],
		"optional_type":                         dummyVisitor[T],
		"override_modifier":                     dummyVisitor[T],
		"pair":                                  dummyVisitor[T],
		"pair_pattern":                          dummyVisitor[T],
		"parenthesized_expression":              dummyVisitor[T],
		"parenthesized_type":                    dummyVisitor[T],
		"pattern":                               dummyVisitor[T],
		"predefined_type":                       dummyVisitor[T],
		"primary_expression":                    dummyVisitor[T],
		"private_property_identifier":           dummyVisitor[T],
		"program":                               dummyVisitor[T],
		"property_identifier":                   dummyVisitor[T],
		"property_signature":                    dummyVisitor[T],
		"public_field_definition":               dummyVisitor[T],
		"readonly_type":                         dummyVisitor[T],
		"regex":                                 dummyVisitor[T],
		"regex_flags":                           dummyVisitor[T],
		"regex_pattern":                         dummyVisitor[T],
		"required_parameter":                    dummyVisitor[T],
		"rest_pattern":                          dummyVisitor[T],
		"rest_type":                             dummyVisitor[T],
		"return_statement":                      dummyVisitor[T],
		"satisfies_expression":                  dummyVisitor[T],
		"sequence_expression":                   dummyVisitor[T],
		"shorthand_property_identifier":         dummyVisitor[T],
		"shorthand_property_identifier_pattern": dummyVisitor[T],
		"spread_element":                        dummyVisitor[T],
		"statement":                             dummyVisitor[T],
		"statement_block":                       dummyVisitor[T],
		"statement_identifier":                  dummyVisitor[T],
		"string":                                dummyVisitor[T],
		"string_fragment":                       dummyVisitor[T],
		"subscript_expression":                  dummyVisitor[T],
		"super":                                 dummyVisitor[T],
		"switch_body":                           dummyVisitor[T],
		"switch_case":                           dummyVisitor[T],
		"switch_default":                        dummyVisitor[T],
		"switch_statement":                      dummyVisitor[T],
		"template_literal_type":                 dummyVisitor[T],
		"template_string":                       dummyVisitor[T],
		"template_substitution":                 dummyVisitor[T],
		"template_type":                         dummyVisitor[T],
		"ternary_expression":                    dummyVisitor[T],
		"this":                                  dummyVisitor[T],
		"this_type":                             dummyVisitor[T],
		"throw_statement":                       dummyVisitor[T],
		"true":                                  dummyVisitor[T],
		"try_statement":                         dummyVisitor[T],
		"tuple_type":                            dummyVisitor[T],
		"type_alias_declaration":                dummyVisitor[T],
		"type_annotation":                       dummyVisitor[T],
		"type_arguments":                        dummyVisitor[T],
		"type_assertion":                        dummyVisitor[T],
		"type_identifier":                       dummyVisitor[T],
		"type_parameter":                        dummyVisitor[T],
		"type_parameters":                       dummyVisitor[T],
		"type_predicate":                        dummyVisitor[T],
		"type_predicate_annotation":             dummyVisitor[T],
		"type_query":                            dummyVisitor[T],
		"unary_expression":                      dummyVisitor[T],
		"undefined":                             dummyVisitor[T],
		"union_type":                            dummyVisitor[T],
		"update_expression":                     dummyVisitor[T],
		"variable_declaration":                  dummyVisitor[T],
		"variable_declarator":                   dummyVisitor[T],
		"while_statement":                       dummyVisitor[T],
		"with_statement":                        dummyVisitor[T],
		"yield_expression":                      dummyVisitor[T],
	}

	dst := make(map[string]visitorFunction[T], len(visitorFuncs))

	for k, v := range visitorFuncs {
		dst[k] = v
	}

	return dst
}

func dummyVisitor[T any](node *sitter.Node, state T, indexInParent int) T {
	for i := range node.NamedChildCount() {
		index := int(i)
		state = VisitNode(node.NamedChild(index), state, index)
	}

	return state
}
